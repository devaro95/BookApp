apply plugin: 'jacoco'
apply from: '../buildsystem/dependencies.gradle'

jacoco {
    toolVersion = "0.8.4"
}

/**
 * The correct path of the report is $rootProjectDir/app/build/reports/jacoco/index.html
 * to run this task use: ./gradlew clean jacocoTestReport
 */

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task generateJacocoTestReport(
        type: JacocoReport,
        dependsOn: [
                "test${sonarqube.buildTypeNameCI.capitalize()}DebugUnitTest",
                "create${sonarqube.buildTypeNameCI.capitalize()}DebugAndroidTestCoverageReport"
        ]) {

    //we use "debug" build type for test coverage (can be other)
    group = "reporting"
    description = "Generate unified Jacoco code coverage report"

    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = false
        html.destination file("${buildDir}/reports/jacoco")
    }

    def coverageExclusions = [
            '**/*Test*.*',
            '**/AutoValue_*.*',
            '**/*JavascriptBridge.class',
            '**/R.class',
            '**/R$*.class',
            '**/Manifest*.*',
            '**/khronos/**/*.*',
            'android/**/*.*',
            '**/BuildConfig.*',
            '**/*$ViewBinder*.*',
            '**/*$ViewInjector*.*',
            '**/Lambda$*.class',
            '**/Lambda.class',
            '**/*Lambda.class',
            '**/*Lambda*.class',
            '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
            '**/*$InjectAdapter.class',
            '**/*$ModuleAdapter.class',
            '**/*$ViewInjector*.class',
            '**/*$*$*.*', // Anonymous classes generated by kotlin
            '**/*$*.*', // Anonymous classes generated by kotlin
            '**/*_Provide*Factory*.*',
            '**/*_Factory.*',
            '**/*.Companion',
            '**/*.CREATOR',
            '**/*$*$*.*', // Anonymous classes generated by kotlin
    ]

    def debugTree = fileTree(
            dir: "../presentation/build//intermediates/classes/${sonarqube.buildTypeNameCI}Debug",
            excludes: coverageExclusions)

    def debugKotlinTree = fileTree(
            dir: "../presentation/build//tmp/kotlin-classes/${sonarqube.buildTypeNameCI}Debug/com/babel/lineadirecta",
            excludes: coverageExclusions)

    def debugAndroidTree = fileTree(
            dir: "../presentation/build//tmp/kotlin-classes/${sonarqube.buildTypeNameCI}DebugAndroidTest/com/babel/lineadirecta",
            excludes: coverageExclusions
    )
    def debugUnitTree = fileTree(
            dir: "../presentation/build//tmp/kotlin-classes/${sonarqube.buildTypeNameCI}DebugUnitTest/com/babel/lineadirecta",
            excludes: coverageExclusions
    )
    def debugDataTree = fileTree(
            dir: "../data/build/intermediates/classes/${sonarqube.buildTypeNameCI}Debug",
            excludes: coverageExclusions)

    def debugDataKotlinTree = fileTree(
            dir: "../data/build/tmp/kotlin-classes/${sonarqube.buildTypeNameCI}Debug/com/babel/lineadirecta",
            excludes: coverageExclusions)

    def debugDataAndroidTree = fileTree(
            dir: "../data/build/tmp/kotlin-classes/${sonarqube.buildTypeNameCI}DebugAndroidTest/com/babel/lineadirecta",
            excludes: coverageExclusions
    )
    def debugDataUnitTree = fileTree(
            dir: "../data/build/tmp/kotlin-classes/${sonarqube.buildTypeNameCI}DebugUnitTest/com/babel/lineadirecta",
            excludes: coverageExclusions
    )
    def debugDomainUnitTree = fileTree(
            dir: "../domain/build/classes/kotlin/main/com/babel/lineadirecta",
            excludes: coverageExclusions
    )

    def mainSrc = "$project.projectDir/src/main/java"
    def domainSrc = "$project.projectDir/../**/domain/src/main/java"
    def dataSrc = "$project.projectDir/../**/data/src/main/java"
    classDirectories = files([
            debugTree,
            debugKotlinTree,
            debugAndroidTree,
            debugUnitTree,
            debugDataTree,
            debugDataKotlinTree,
            debugDataAndroidTree,
            debugDataUnitTree,
            debugDomainUnitTree
    ])

    sourceDirectories = files([
            mainSrc,
            domainSrc,
            dataSrc
    ])

    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/test${sonarqube.buildTypeNameCI.capitalize()}DebugUnitTest.exec", //we use "debug" build type for test coverage (can be other)
            "outputs/code_coverage/${sonarqube.buildTypeNameCI}DebugAndroidTest/connected/*coverage.ec"
    ])
}

task jacocoMerge(type: JacocoMerge, dependsOn: [
        'generateJacocoTestReport'
]) {
    destinationFile = file("${buildDir}/jacoco/test${sonarqube.buildTypeNameCI.capitalize()}DebugUnitTest.exec")
    executionData = project.fileTree(dir: '.', include:'**/*.exec')
            .filter { f -> f.exists() }
}
